/* ==========================================================================
   Mixins
   ========================================================================== */

@mixin main($width: 980px) {
  width: 100%;
  max-width: $width;
  margin: 0 auto;
  position: relative;
  height: 100%;
}

/* Show / hide
   ========================================================================== */

@mixin show() {
    opacity: 1;
    visibility: visible;
}

@mixin hide() {
    opacity: 0;
    visibility: hidden;
}

@mixin animate-hide($time: 500ms) {
    
    @include transition(opacity #{$time}, visibility #{500ms});

}


@mixin calc($property, $expression) { 

  #{$property}: -moz-calc(#{$expression}); 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 

} 


@mixin hide-text() {
    display: block;
    overflow: hidden;
    text-indent: -9000px;
}

@mixin center() {

    @include translate(-50%, -50%);
    position: absolute;
    left: 50%;
    top: 50%;

}

@mixin before() {
  display: block;
  content: '';
  position: absolute;
}

@mixin clear-fix() {
  
  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
  // For IE 6/7 (trigger hasLayout)
  zoom: 1;
}

/* Animations
   ========================================================================== */

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {

    @content; 
  
  }
  @-moz-keyframes #{$name} {

    @content;
  
  }
  @-ms-keyframes #{$name} {

    @content;
  
  }
  @keyframes #{$name} {

    @content;
  
  } 

}
 

/* Selections
   ========================================================================== */

@mixin selection($color, $bg-color) { 

  @include user-select(text);

  &::-moz-selection {
    background: $bg-color;
    color: $color;
  } 

  &::selection {
      background: $bg-color;
      color: $color; 
  }

}

@mixin disable-selection() {
  
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

}

@mixin rwd-by-classes($type){
    @if($type == screen) {
        body.screen {
            @content;
        }
    } 
    
    @if($type == mobile) {
        body.mobile {
            @content;
        }
    } 
}

/* Retina
   ========================================================================== */

@mixin rwd($type: none, $min: 0, $max: 0) {
  
  
    $min : strip-units($min);
    $max : strip-units($max);

    /* Screen 
       ========================================================================== */
    
    @if($type == screen and variable-exists(screen-width)) {

       $screen-min : map-get($screen-width, min);

       @media all and (min-width: #{$screen-min}px){

            @content;

       }  

    } @else if($type == notScreen and variable-exists(tablet-width)) {

        $screen-min : map-get($screen-width, min); 

        @media all and (max-width: #{$screen-min}px){

            @content;

       }


     /* Tablet
        ========================================================================== */

             
    } @else if($type == tablet and variable-exists(tablet-width)){

       $tablet-max : map-get($tablet-width, max); 
      $tablet-min : map-get($tablet-width, min);

       @media all and (min-width: #{$tablet-min}px) and (max-width: #{$tablet-max}px){

            @content;

       }   

    /* Retina
       ========================================================================== */
    
    } @else if($type == retina){

        @media (-webkit-min-device-pixel-ratio: 2), 
                (-o-min-device-pixel-ratio: 3/2), 
                (min--moz-device-pixel-ratio: 2), 
                (min-device-pixel-ratio: 2), 
                (min-resolution: 144dppx) {

            @content;

       }


      /* Mobile
        ========================================================================== */
            
    } @else if($type == mobile and variable-exists(mobile-width)){


        $mobile-max : map-get($mobile-width, max);
    
        @media all and (max-width: #{$mobile-max}px){

            @content;

       }     

    } @else if($type == notMobile and variable-exists(mobile-width)) {

        $tablet-min : map-get($tablet-width, min); 

        @media all and (min-width: #{$tablet-min}px){

            @content;

       }

     }  @else if( $max != 0 and $min != 0 ){
              
        @media all and (min-width: #{$min}px) and (max-width: #{$max}px){

            @content;
           
       }
            
    } @else if($min != 0){

        @media all and (min-width: #{$min}px){

            @content;

        } 

    } @else if($max != 0){
        
        @media all and (max-width: #{$max}px){

            @content;

        } 

    }

}

/* Sprites
   ========================================================================== */

@mixin use-sprite($sprite-map, $sprite, $sprites-map-retina: false, $line-height: false, $size: true) {
    
    background-image: sprite-url($sprite-map);
    background-position: sprite-position($sprite-map, $sprite);
    background-repeat: no-repeat;
    background-color: transparent;
    overflow: hidden;
    display: block;
    
    // dont add element size
    @if($size){
         height: image-height(sprite-file($sprite-map, $sprite));
         width: image-width(sprite-file($sprite-map, $sprite));
    }
 

    @if($line-height){
        line-height: image-height(sprite-file($sprite-map, $sprite));
    }

    @if($sprites-map-retina){
  
     // for retina display
    @include rwd(retina) {

          background-image: sprite-url($sprites-map-retina);
          background-size: ceil(image-width(sprite-path($sprites-map-retina)) / 2) ceil(image-height(sprite-path($sprites-map-retina)) / 2);
          background-position: ceil(nth(sprite-position($sprites-map-retina, $sprite), 1) / 2) round(nth(sprite-position($sprites-map-retina, $sprite), 2) / 2);
         
          @if($size){
            height: image-height(sprite-file($sprites-map-retina, $sprite)) / 2;
            width: image-width(sprite-file($sprites-map-retina, $sprite)) / 2;
          } 

          @if($line-height){

               line-height: image-height(sprite-file($sprites-map-retina, $sprite)) / 2;

          }

     }

   } 

}
